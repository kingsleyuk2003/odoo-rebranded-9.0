# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.
# Copyright 2017  Kinsolve Solutions
# Copyright 2017 Kingsley Okonkwo (kingsley@kinsolve.com, +2348030412562)
# License: see https://www.gnu.org/licenses/lgpl-3.0.en.html


from datetime import datetime, timedelta
from openerp import api, fields, models, _
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT
from urllib import urlencode
from urlparse import urljoin



class ProductRegulation(models.Model):
    _name = 'product.regulation'
    _description = "Product Regulation"
    _inherit = ['mail.thread', 'ir.needaction_mixin']


    @api.model
    def run_product_regulation_expiry_date_check(self):

        is_send_stock_expiry_notification  = self.env.user.company_id.is_send_stock_expiry_notification
        if  is_send_stock_expiry_notification :
            product_obj = self.env['product.regulation']
            ctx = self.env.context.copy()


            the_date = datetime.today().strftime('%d-%m-%Y %H:%M:%S')
            msg = "<style> " \
                    "table, th, td {" \
                    "border: 1px solid black; " \
                    "border-collapse: collapse;" \
                    "}" \
                    "th, td {" \
                    "padding-left: 5px;"\
                    "}" \
                    "</style>"
            msg += "<p>Hello,</p>"
            msg += "<p>Please see the Expiry Product Notification as at %s</p><p></p>"  % (the_date)
            msg += "<table width='100%' >"
            msg += "<tr><td colspan='5' align='center' style='margin:35px' ><h3>List of Products Due for NAFDAC Registration</h3></td></tr>" \
                  "<tr align='left' ><th>S/N</th><th>Product Name</th><th>NAFDAC Reg No.</th><th>Expiry Date</th><th>Remaining Days to Expire</th></tr>"

            at_least_one = False
            products = product_obj.search([])
            count = 0

            for product in products :
                product._compute_remaining_days()
                if product.is_expiring_soon and product.state == 'activated' :
                    product_name = product.name
                    nafdac_reg_no = product.nafdac_reg_no
                    expiry_date_format = datetime.strptime(product.expiry_date,'%Y-%m-%d').strftime('%d-%m-%Y')
                    remaining_days = product.days_remaining
                    count += 1
                    at_least_one = True
                    msg += "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" % (count,product_name,nafdac_reg_no,expiry_date_format,remaining_days)

            msg += "</table> <p></p><p>You may start processing the registration of the listed items. Incase you want any of the items to be exempted from this reminders list. Please log in and deactivate the reminder or set the Status to 'New Registration', 'Renewal' Status for the specific product.</p>" \
				  "<p>Regards and Thanks</p>" \
				  "<p>This is an autogenerated message from %s ERP System</p>" % (self.env.user.company_id.name)


            #Send Email
            company_email = self.env.user.company_id.email.strip()
            if company_email and at_least_one :
                user_ids = []
                mail_obj = self.env['mail.mail']
                group_obj = self.env.ref('kin_product_regulation.group_receive_product_registration_email_reminder')
                for user in group_obj.users:
                    #Send Email
                    mail_data = {
                            'model': 'product.regulation',
                            'res_id': self.id,
                            'record_name': 'Expiry Alert Product Registration Notification',
                            'email_from': company_email,
                            'reply_to': company_email,
                            'subject': "Expiry Alert Notification for the date %s" % (the_date),
                            'body_html': '%s' % msg,
                            'auto_delete': True,
                            #'recipient_ids': [(4, id) for id in new_follower_ids]
                            'email_to': user.partner_id.email
                        }
                    mail_id = mail_obj.create(mail_data)
                    mail_obj.send([mail_id])

            return True

    @api.multi
    def btn_new_registration(self):
        self.state = 'new_reg'

    @api.multi
    def btn_renewal(self):
        self.state = 'renewal'

    @api.multi
    def btn_activate(self):
        self.state = 'activated'

    @api.multi
    def btn_deactivate(self):
        self.state = 'deactivated'

    @api.multi
    def btn_reactivate(self):
        self.state = 'activated'


    def _compute_remaining_days(self):
        for product in self :
            if product.expiry_date :
                exp_date = product.expiry_date
                today = datetime.strptime(datetime.today().strftime('%Y-%m-%d %H:%M:%S'), DEFAULT_SERVER_DATETIME_FORMAT)
                expiry_date = datetime.strptime(exp_date,'%Y-%m-%d')
                date_diff = expiry_date - today
                remaining_days = date_diff.days
                product.days_remaining = remaining_days
                expiry_day_interval = product.expiry_day_interval
                if (remaining_days <= expiry_day_interval) and (remaining_days < 0):
                    #Assigning variable does not seem to work when the computed function is evaluated by the computed field.
                    #e.g. product.is_expired = False
                    # But it works if the cron job for this module runs its routine, so the solution was to use the compact write() method
                    product.write({'is_expired':True,'is_expiring_soon':False,'is_good_status': False})
                elif (remaining_days <= expiry_day_interval) and (remaining_days > 0):
                    product.write({'is_expired': False, 'is_expiring_soon': True, 'is_good_status': False})
                else :
                    product.write({'is_expired': False, 'is_expiring_soon': False, 'is_good_status': True})


    name = fields.Char('Product Name', required=True, translate=True, select=True,track_visibility = "onchange")
    manufacturer_id =  fields.Many2one('res.partner',string='Manufacturer',track_visibility="onchange" )
    nafdac_reg_no = fields.Char('Nafdac Registration Number',track_visibility="onchange" )
    category_id = fields.Many2one('kin.product.category', string='Product Category')
    issue_date = fields.Date('Issued Date' ,track_visibility="onchange" )
    expiry_date = fields.Date('Expiry Date',track_visibility="onchange")
    expiry_day_interval = fields.Integer(string='Expiry Days Interval', help="Reminder Days Intervals from the Expiry Date",required=True,default=lambda self: self.env.user.company_id.expiry_date_interval)
    days_remaining = fields.Integer(string='Remaining Days to Expire',compute='_compute_remaining_days')
    product_id = fields.Many2one('product.template', string='Product')
    is_expired = fields.Boolean(string="Is Expired")
    is_expiring_soon = fields.Boolean(string="Is Expiring Soon")
    is_good_status = fields.Boolean(string="Is Good")
    user_id = fields.Many2one('res.users',string='Responsible',default=lambda self: self.env.user.id)
    note = fields.Text(string='Note')
    state = fields.Selection([('activated', 'Reminder Activated'),('new_reg', 'New Registration'),('renewal', 'Renewal'), ('deactivated', 'Reminder De-Activated')],default='activated', track_visibility='onchange')


class ProductCategory(models.Model):
    _name = 'kin.product.category'

    name = fields.Char('Category Name')
    description = fields.Text('Description')


class ResCompanyProductRegulationExtend(models.Model):
    _inherit = "res.company"

    expiry_date_interval = fields.Integer(string='Expiry Days Interval', default=90)
    is_send_stock_expiry_notification = fields.Boolean(string='Send Stock Expiry Notification',default=True)
